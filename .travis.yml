sudo: required
dist: xenial
language: cpp

git:
  submodules: true

cache:
  apt: true
  ccache: true

linux-gcc-7: &linux-gcc-7
  os: linux
  compiler: 'g++-7'
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test']
      packages: ['g++-7', 'lcov']
  before_install:
    - export CC="gcc-7" CXX="g++-7"

linux-gcc-8: &linux-gcc-8
  os: linux
  compiler: 'g++-8'
  addons:
    apt:
      sources: ['ubuntu-toolchain-r-test']
      packages: ['g++-8']
  before_install:
    - export CC="gcc-8" CXX="g++-8"

# https://docs.travis-ci.com/user/languages/c/#gcc-on-linux
matrix:
  include:
  - << : *linux-gcc-7
    env:
      - BUILD=coverage
      - BUILD_TYPE=Debug
  - << : *linux-gcc-8
    env:
      - BUILD=unit
      - BUILD_TYPE=Release
  - << : *linux-gcc-7
    env:
      - BUILD=unit
      - BUILD_TYPE=Release
  # To reduce build time we disable debug builds of unit tests, because they
  # are completely contained in coverage test.
  # - << : *linux-gcc-7
  #   env:
  #     - BUILD=unit
  #     - BUILD_TYPE=Debug
  - << : *linux-gcc-7
    env:
      - BUILD=performance
      - BUILD_TYPE=Release
  - << : *linux-gcc-7
    env:
      - BUILD=header
      - BUILD_TYPE=Release
  - << : *linux-gcc-7
    env:
      - BUILD=snippet
      - BUILD_TYPE=Release
  - os: linux
    compiler: 'doxygen'
    addons:
      apt:
        # adds epstopdf, ghostscript, latex
        packages: ['texlive-font-utils', 'ghostscript', 'texlive-latex-base']
    env:
      - BUILD=documentation
    cache:
      directories:
          - /tmp/doxygen-download
    before_install:
       - DOXYGEN_VER=1.8.13
       - DOXYGEN_FOLDER=doxygen-${DOXYGEN_VER}
       - mkdir -p /tmp/doxygen-download
       - wget --no-clobber --directory-prefix=/tmp/doxygen-download/ https://sourceforge.net/projects/doxygen/files/rel-${DOXYGEN_VER}/${DOXYGEN_FOLDER}.linux.bin.tar.gz
       - tar -C /tmp/ -zxvf /tmp/doxygen-download/${DOXYGEN_FOLDER}.linux.bin.tar.gz
       - PATH=$PATH:/tmp/${DOXYGEN_FOLDER}/bin/
       - doxygen --version

install:
  - ccache --version
  - $CXX -v
  - cmake --version
  - |
    # use gcov7 matching the g++7 compiler
    if [[ "${BUILD}" =~ ^(coverage)$ ]]; then
      GCOV_PATH=`realpath ~/bin`
      mkdir -p ${GCOV_PATH}
      ln -s `which gcov-7` ${GCOV_PATH}/gcov
      export PATH="${GCOV_PATH}:${PATH}"
    fi

before_script:
  - mkdir ../seqan3-build
  - cd ../seqan3-build
  - cmake ../seqan3/test/${BUILD} -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
  - |
    if [[ "${BUILD}" =~ ^(unit|header|snippet|coverage)$ ]]; then
      make gtest_project
    fi
  - |
    if [[ "${BUILD}" =~ ^(performance)$ ]]; then
      make gbenchmark_project
    fi

script:
  - make -k -j2
  - |
    if test coverage != "${BUILD}"; then
      ctest . --output-on-failure
    fi

after_success:
  - |
    if test coverage = "${BUILD}"; then
      bash <(curl -s https://codecov.io/bash) -f ./seqan3_coverage -R "${TRAVIS_BUILD_DIR}" || echo 'Codecov failed to upload'
    fi

after_script:
  - ccache -s
