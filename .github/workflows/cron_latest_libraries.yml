# SPDX-FileCopyrightText: 2006-2024 Knut Reinert & Freie Universität Berlin
# SPDX-FileCopyrightText: 2016-2024 Knut Reinert & MPI für molekulare Genetik
# SPDX-License-Identifier: CC0-1.0

name: Latest Libraries

on:
  # Will always run on the default branch
  schedule:
    - cron: "0 4 * * SUN"
  # Enables a manual trigger, may run on any branch
  workflow_dispatch:

concurrency:
  group: libs-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  SEQAN3_NO_VERSION_CHECK: 1
  TZ: Europe/Berlin
  ISSUE: 2747 # Issue number to use for reporting failures

defaults:
  run:
    shell: bash -Eexuo pipefail {0}

jobs:
  build:
    name: ${{ matrix.build }} gcc${{ matrix.compiler }}
    runs-on: ubuntu-22.04
    timeout-minutes: 300
    if: github.repository_owner == 'seqan' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        compiler: [11, 12, 13]
        build: [unit, snippet, performance, header]
        include:
          - compiler: 12
            build: unit
            cxx_flags: "-Wno-restrict" # Bogus errors in gtest that won't be fixed upstream

    steps:
      - name: Checkout SeqAn3
        uses: actions/checkout@v4
        with:
          path: seqan3
          submodules: true

      - name: Update all submodules
        run: |
          cd seqan3
          git submodule status
          git submodule update --recursive --remote
          git submodule status

      - name: Update googletest
        run: |
          grep 'SEQAN3_GTEST_TAG ".*"' seqan3/test/cmake/seqan3_require_test.cmake
          sed -i 's/SEQAN3_GTEST_TAG ".*"/SEQAN3_GTEST_TAG "main"/' seqan3/test/cmake/seqan3_require_test.cmake
          grep 'SEQAN3_GTEST_TAG ".*"' seqan3/test/cmake/seqan3_require_test.cmake

      - name: Update googlebenchmark
        run: |
          grep 'SEQAN3_BENCHMARK_TAG ".*"' seqan3/test/cmake/seqan3_require_benchmark.cmake
          sed -i 's/SEQAN3_BENCHMARK_TAG ".*"/SEQAN3_BENCHMARK_TAG "main"/' seqan3/test/cmake/seqan3_require_benchmark.cmake
          grep 'SEQAN3_BENCHMARK_TAG ".*"' seqan3/test/cmake/seqan3_require_benchmark.cmake

      - name: Checkout SeqAn2
        uses: actions/checkout@v4
        with:
          repository: seqan/seqan
          path: seqan3/submodules/seqan

      - name: Setup compiler
        uses: seqan/actions/setup-compiler@main
        with:
          compiler: gcc-${{ matrix.compiler }}

      - name: Install CMake
        uses: seqan/actions/setup-cmake@main
        with:
          cmake: 3.16.9

      - name: Configure tests
        run: |
          mkdir seqan3-build
          cd seqan3-build
          cmake ../seqan3/test/${{ matrix.build }} -DCMAKE_BUILD_TYPE=Release \
                                                   -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
                                                   -DSEQAN3_VERBOSE_TESTS=OFF \
                                                   -DSEQAN3_BENCHMARK_MIN_TIME=0.01
          case "${{ matrix.build }}" in
            unit) make -j2 gtest_build;;
            snippet) make -j2 gtest_build;;
            performance) make -j2 gbenchmark_build;;
            header) make -j2 gtest_build gbenchmark_build;;
          esac

      - name: Build tests
        run: |
          cd seqan3-build
          make -k -j2 2>&1 | tee build.log

      - name: Setup Python
        if: ${{ failure() }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Process Log
        if: ${{ failure() }}
        run: |
          FILE="seqan3/.github/ISSUE_TEMPLATE/cron_comment_template.md"
          python3 seqan3/.github/workflows/scripts/process_compiler_error_log.py seqan3-build/build.log >> $FILE

      - name: Create comment body
        if: ${{ failure() }}
        id: comment-body
        run: |
          FILE="seqan3/.github/ISSUE_TEMPLATE/cron_comment_template.md"
          URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          sed -i "s@{{ build }}@${{ matrix.build }}@" $FILE
          sed -i "s@{{ compiler }}@${{ matrix.compiler }}@" $FILE
          sed -i "s@{{ url }}@$URL@" $FILE
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat $FILE >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Reopen issue
        if: ${{ failure() }}
        uses: octokit/request-action@v2.x
        with:
          route: PATCH /repos/{owner}/{repo}/issues/{issue_number}
          owner: ${{ github.repository_owner }}
          repo: seqan3
          issue_number: ${{ env.ISSUE }}
          state: "open"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment
        if: ${{ failure() }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ env.ISSUE }}
          body: ${{ steps.comment-body.outputs.body }}

