name: SeqAn3 CI

on:
  push:
    branches:
      # Push events to branches matching refs/heads/master
      - 'master'
      # Push events to branches matching refs/heads/release*
      - 'release*'
  pull_request:

env:
  DOXYGEN_VERSION: 1.9.1
  SEQAN3_NO_VERSION_CHECK: 1
  TZ: Europe/Berlin

defaults:
  run:
    shell: bash -ex {0}

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Coverage gcc7"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.8.2
            build: coverage
            build_type: Debug
            build_threads: 2
            test_threads: 2
            skip_run_tests: true # Already ran by the make call

          - name: "Unit gcc9 (c++2a) on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-9"
            cc: "gcc-9"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++2a"

          - name: "Unit gcc9 (c++2a) on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-9"
            cc: "gcc-9"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++2a"

          - name: "Unit gcc10 (c++17) on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 2
            test_threads: 2
            cxx_flags: "-std=c++17 -fconcepts"

          - name: "Unit gcc10 (c++17) on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 3
            test_threads: 3
            cxx_flags: "-std=c++17 -fconcepts"

          - name: "Unit gcc10 (c++20) on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 2
            test_threads: 2

          - name: "Unit gcc10 (c++20) on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 3
            test_threads: 3

          - name: "Unit gcc8 on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-8"
            cc: "gcc-8"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 2
            test_threads: 2

          - name: "Unit gcc8 on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-8"
            cc: "gcc-8"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 3
            test_threads: 3

          - name: "Unit gcc7 on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 2
            test_threads: 2

          - name: "Unit gcc7 on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.8.2
            build: unit
            build_type: Release
            build_threads: 3
            test_threads: 3

          - name: "Performance gcc7"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.8.2
            build: performance
            build_type: Release
            build_threads: 2
            test_threads: 2

          - name: "Header gcc7"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.8.2
            build: header
            build_type: Release
            build_threads: 2
            test_threads: 2

          - name: "Non-cyclic tests gcc7"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.8.2
            build: unit
            build_type: Debug
            build_threads: 2
            use_include_dependencies: true
            skip_build_tests: true
            skip_run_tests: true

          - name: "CMake external project gcc7"
            os: ubuntu-20.04
            requires_toolchain: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.14.6 # the whole test suite needs at least cmake 3.14
            build: external_project
            build_type: Debug
            build_threads: 1 # output is important to be in sequential order
            skip_run_tests: true

          - name: "Snippet gcc7"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            cmake: 3.8.2
            build: snippet
            build_type: Release
            build_threads: 2
            test_threads: 1 # snippets create and delete files and some separate tests create/delete the same files,
                            # they are not safe to run in parallel

          - name: "Documentation"
            os: ubuntu-20.04
            cmake: 3.8.2
            requires_toolchain: false
            requires_ccache: false
            build: documentation
            test_threads: 2
            skip_build_tests: true

    steps:
      - name: Checkout SeqAn3
        uses: actions/checkout@v2
        with:
          path: seqan3
          fetch-depth: 2
          submodules: true

      - name: Checkout SeqAn2
        uses: actions/checkout@v2
        with:
          repository: seqan/seqan
          ref: develop
          path: seqan3/submodules/seqan

      - name: Get cached CMake
        uses: actions/cache@v2
        with:
          path: /tmp/cmake-download
          key: ${{ runner.os }}-CMake_${{ matrix.cmake }}

      - name: Setup CMake
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            OS="Linux"
          else
            OS="Darwin"
          fi
          if [ "$RUNNER_OS" == "Linux" ] && [[ "${{ matrix.build }}" =~ ^(external_project)$ ]]; then
            sudo apt-get install libidn11 # this is needed for cmake 3.4 within the external_project test
          fi
          mkdir -p /tmp/cmake-download
          wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/cmake-download/ https://github.com/Kitware/CMake/releases/download/v${{ matrix.cmake }}/cmake-${{ matrix.cmake }}-${OS}-x86_64.tar.gz
          tar -C /tmp/ -zxf /tmp/cmake-download/cmake-${{ matrix.cmake }}-${OS}-x86_64.tar.gz
          echo "/tmp/cmake-${{ matrix.cmake }}-${OS}-x86_64/bin" >> $GITHUB_PATH # Only available in subsequent steps!

      - name: Get cached Doxygen
        if: matrix.build == 'documentation'
        uses: actions/cache@v2
        with:
          path: /tmp/doxygen-download
          key: ${{ runner.os }}-Doxygen_${{ env.DOXYGEN_VERSION }}

      - name: Setup Doxygen
        if: matrix.build == 'documentation'
        run: |
          sudo apt-get install texlive-font-utils ghostscript texlive-latex-extra graphviz libclang-9-dev libclang-cpp9 # graphviz for dot, latex to parse formulas, libclang for doxygen
          mkdir -p /tmp/doxygen-download
          wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/doxygen-download/ https://sourceforge.net/projects/doxygen/files/rel-${DOXYGEN_VERSION}/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          tar -C /tmp/ -zxf /tmp/doxygen-download/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          echo "/tmp/doxygen-${DOXYGEN_VERSION}/bin" >> $GITHUB_PATH # Only available in subsequent steps!

      - name: Add package source
        if: matrix.requires_toolchain && runner.os == 'Linux'
        shell: bash
        run: sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/ppa && sudo apt-get update

      - name: Configure Homebrew
        if: matrix.requires_toolchain && runner.os == 'macOS'
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install ccache
        if: matrix.requires_ccache
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes ccache
          else
            brew install --force-bottle ccache
          fi

      - name: Install compiler ${{ matrix.cxx }}
        if: matrix.requires_toolchain
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes ${{ matrix.cxx }}
          else
            cxx_macos_name=$(echo "${{ matrix.cxx }}" | sed "s/++-/cc@/g")
            brew list --versions $cxx_macos_name || brew install --force-bottle $cxx_macos_name
            brew upgrade --force-bottle $cxx_macos_name
            brew link $cxx_macos_name
          fi

      - name: Install lcov
        if: matrix.build == 'coverage'
        run: |
          sudo apt-get install --yes lcov
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-7 100

      - name: Load ccache
        if: matrix.requires_ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.name }}-ccache-${{ github.ref }}-${{ github.run_number }}
          # Restoring: From current branch, otherwise from base branch, otherwise from any branch.
          restore-keys: |
            ${{ matrix.name }}-ccache-${{ github.ref }}
            ${{ matrix.name }}-ccache-${{ github.base_ref }}
            ${{ matrix.name }}-ccache-

      - name: Tool versions
        env:
          CXX: ${{ matrix.cxx }}
        run: |
          env cmake --version
          env doxygen --version || true
          env $CXX --version || true

      - name: Configure tests
        env:
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}
        run: |
          mkdir seqan3-build
          cd seqan3-build
          cmake ../seqan3/test/${{ matrix.build }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" -DSEQAN3_VERBOSE_TESTS=OFF -DSEQAN3_BENCHMARK_MIN_TIME=0.01
          if [[ "${{ matrix.build }}" =~ ^(unit|header|snippet|coverage)$ ]]; then
            make gtest_build
          fi
          if [[ "${{ matrix.build }}" =~ ^(performance|header)$ ]]; then
            make gbenchmark_build
          fi
          if [[ "${{ matrix.build }}" =~ ^(external_project)$ ]]; then
            make seqan3_test_prerequisite
          fi
          if [[ "${{ matrix.build }}" =~ ^(documentation)$ ]]; then
            make download-cppreference-doxygen-web-tag
          fi
          if [[ "${{ matrix.use_include_dependencies }}" == "true" ]]; then
            cmake -DSEQAN3_USE_INCLUDE_DEPENDENCIES=1 .
            make all_dependencies
            cmake . # are tests cyclic?
          fi

      - name: Build tests
        if: ${{!matrix.skip_build_tests}}
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 5G
        run: |
          ccache -p || true
          cd seqan3-build
          make -k -j${{ matrix.build_threads }}
          ccache -s || true

      - name: Run tests
        if: ${{!matrix.skip_run_tests}}
        run: |
          cd seqan3-build
          ctest . -j${{ matrix.test_threads }} --output-on-failure

      - name: Submit coverage build
        if: matrix.build == 'coverage'
        uses: codecov/codecov-action@v1
        with:
          files: ${{ github.workspace }}/seqan3-build/seqan3_coverage
          root_dir: ${{ github.workspace }}/seqan3

      - name: Package documentation
        if: matrix.build == 'documentation'
        continue-on-error: true
        run: tar -zcf documentation.tar.gz seqan3-build

      - name: Upload documentation
        if: matrix.build == 'documentation'
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: documentation.tar.gz
