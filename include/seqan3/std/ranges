// -----------------------------------------------------------------------------------------------------
// Copyright (c) 2006-2019, Knut Reinert & Freie Universität Berlin
// Copyright (c) 2016-2019, Knut Reinert & MPI für molekulare Genetik
// This file may be used, modified and/or redistributed under the terms of the 3-clause BSD-License
// shipped with this file and also available at: https://github.com/seqan/seqan3/blob/master/LICENSE
// -----------------------------------------------------------------------------------------------------

/*!\file
 * \brief Adaptations of concepts from the Ranges TS
 * \author Hannes Hauswedell <hannes.hauswedell AT fu-berlin.de>
 */

#pragma once

#include <seqan3/core/platform.hpp>

#if __cpp_lib_ranges // C++20 ranges available
#include <ranges>
#else // implement via range-v3

#include <range/v3/range/concepts.hpp>
#include <range/v3/iterator/default_sentinel.hpp>
#include <range/v3/iterator/insert_iterators.hpp>
#include <range/v3/iterator/operations.hpp>
#include <range/v3/iterator/stream_iterators.hpp>
#include <range/v3/algorithm/copy.hpp>
#include <range/v3/algorithm/equal.hpp>
#include <range/v3/view/any_view.hpp>
#include <range/v3/view/reverse.hpp>

/*!\defgroup ranges ranges
 * \ingroup std
 * \brief The \<ranges\> header from C++20's standard library.
 */

namespace std::ranges
{
/*!\addtogroup ranges
 * \{
 */
/*!\interface std::ranges::Range <>
 * \brief Defines the requirements of a type that allows iteration over its elements by providing a begin iterator
 * and an end sentinel.
 * \sa http://en.cppreference.com/w/cpp/ranges/Range
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT Range = ::ranges::Range<type>;
//!\endcond

/*!\interface std::ranges::SizedRange <>
 * \extends std::ranges::Range
 * \brief Specifies the requirements of a Range type that knows its size in constant time with the size function.
 * \sa http://en.cppreference.com/w/cpp/ranges/SizedRange
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT SizedRange = Range<type> && ::ranges::SizedRange<type>;
//!\endcond

/*!\interface std::ranges::CommonRange  <>
 * \extends std::ranges::Range
 * \brief Specifies requirements of a Range type for which `begin` and `end` return objects of the same type.
 * \sa http://en.cppreference.com/w/cpp/ranges/BoundedRange
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT CommonRange = Range<type> && ::ranges::CommonRange<type>;
//!\endcond

/*!\interface std::ranges::OutputRange <>
 * \extends std::ranges::Range
 * \brief Specifies requirements of a Range type for which `begin` returns a type that models
 * std::OutputIterator.
 * \sa http://en.cppreference.com/w/cpp/ranges/OutputRange
 */
//!\cond
template <typename type, typename out_type>
SEQAN3_CONCEPT OutputRange = Range<type> && ::ranges::OutputRange<type, out_type>;
//!\endcond

/*!\interface std::ranges::InputRange <>
 * \extends std::ranges::Range
 * \brief Specifies requirements of a Range type for which `begin` returns a type that models
 * std::InputIterator.
 * \sa http://en.cppreference.com/w/cpp/ranges/InputRange
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT InputRange = Range<type> && ::ranges::InputRange<type>;
//!\endcond

/*!\interface std::ranges::ForwardRange <>
 * \extends std::ranges::InputRange
 * \brief Specifies requirements of a Range type for which `begin` returns a type that models
 * std::ForwardIterator.
 * \sa http://en.cppreference.com/w/cpp/ranges/ForwardRange
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT ForwardRange = InputRange<type> && ::ranges::ForwardRange<type>;
//!\endcond

/*!\interface std::ranges::BidirectionalRange <>
 * \extends std::ranges::ForwardRange
 * \brief Specifies requirements of a Range type for which `begin` returns a type that models
 * std::BidirectionalIterator.
 * \sa http://en.cppreference.com/w/cpp/ranges/BidirectionalRange
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT BidirectionalRange = ForwardRange<type> && ::ranges::BidirectionalRange<type>;
//!\endcond

/*!\interface std::ranges::RandomAccessRange <>
 * \extends std::ranges::BidirectionalRange
 * \brief Specifies requirements of a Range type for which `begin` returns a type that models
 * std::RandomAccessIterator.
 * \sa http://en.cppreference.com/w/cpp/ranges/RandomAccessRange
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT RandomAccessRange = BidirectionalRange<type> && ::ranges::RandomAccessRange<type>;
//!\endcond

/*!\interface std::ranges::ContiguousRange <>
 * \extends std::ranges::RandomAccessRange
 * \brief Specifies requirements of a Range type whose elements occupy adjacent locations in memory.
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT ContiguousRange = RandomAccessRange<type> && ::ranges::ContiguousRange<type>;
//!\endcond

/*!\interface std::ranges::View <>
 * \extends std::Semiregular
 * \extends std::ranges::ViewableRange
 * \brief Specifies the requirements of a Range type that has constant time copy, move and assignment operators.
 * \sa \ref view
 * \sa http://en.cppreference.com/w/cpp/ranges/View
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT View = Range<type> && ::ranges::View<type>;
//!\endcond

/*!\interface std::ranges::ViewableRange <>
 * \extends std::ranges::Range
 * \brief Specifies the requirements of a Range type that is either a std::ranges::View or an lvalue-reference.
 * \sa \ref view
 */
//!\cond
template <typename type>
SEQAN3_CONCEPT ViewableRange = Range<type> && (std::is_lvalue_reference_v<type> || View<type>);
//!\endcond

/*!\typedef std::ranges::begin;
 * \brief Alias for ranges::begin. Returns an iterator to the beginning of a range.
 */
using SEQAN3_DOXYGEN_ONLY(begin =) ::ranges::begin;

/*!\typedef std::ranges::end
 * \brief Alias for ranges::end. Returns an iterator to the end of a range.
 */
using SEQAN3_DOXYGEN_ONLY(end =) ::ranges::end;

/*!\typedef std::ranges::next
 * \brief Alias for ranges::next. Returns next iterator.
 */
using SEQAN3_DOXYGEN_ONLY(next =) ::ranges::next;

/*!\typedef std::ranges::size
 * \brief Alias for ranges::size. Obtains the size of a range whose size can be calculated in constant time.
 */
using SEQAN3_DOXYGEN_ONLY(size =) ::ranges::size;

/*!\typedef std::ranges::copy
 * \brief Alias for ranges::copy. Copies a range of elements to a new location.
 */
using SEQAN3_DOXYGEN_ONLY(copy =) ::ranges::copy;

/*!\typedef std::ranges::empty
 * \brief Alias for ranges::empty. Checks whether a range is empty.
 */
using SEQAN3_DOXYGEN_ONLY(empty =) ::ranges::empty;

/*!\typedef std::ranges::equal
* \brief Alias for ranges::equal. Determines if two sets of elements are the same.
*/
using SEQAN3_DOXYGEN_ONLY(equal =) ::ranges::equal;

/*!\typedef std::ranges::default_sentinel
* \brief Alias for ranges::default_sentinel. Empty sentinel object for use with iterators that know the bound of their range.
*/
using SEQAN3_DOXYGEN_ONLY(default_sentinel =) ::ranges::default_sentinel;

/*!\typedef std::ranges::default_sentinel_t
* \brief Alias for ranges::default_sentinel_t. Type of ranges::default_sentinel.
*/
using SEQAN3_DOXYGEN_ONLY(default_sentinel_t =) ::ranges::default_sentinel_t;

/*!\typedef std::ranges::sentinel_t
* \brief Alias for ranges::sentinel_t. Obtains the sentinel type of a range.
*/
using SEQAN3_DOXYGEN_ONLY(sentinel_t =) ::ranges::sentinel_t;

/*!\typedef std::ranges::iterator_t
* \brief Alias for ranges::iterator_t. Obtains the iterator type of a range.
*/
using SEQAN3_DOXYGEN_ONLY(iterator_t =) ::ranges::iterator_t;

/*!\typedef std::ranges::ostreambuf_iterator
* \brief Alias for ranges::ostreambuf_iterator. Output iterator that writes to std::basic_streambuf.
*/
using SEQAN3_DOXYGEN_ONLY(ostreambuf_iterator =) ::ranges::ostreambuf_iterator;

/*!\typedef std::ranges::cbegin
* \brief Alias for ranges::cbegin. Returns an iterator to the beginning of a range.
*/
using SEQAN3_DOXYGEN_ONLY(cbegin =) ::ranges::cbegin;

/*!\typedef std::ranges::cend
* \brief Alias for ranges::cend. Returns an iterator to the end of a range.
*/
using SEQAN3_DOXYGEN_ONLY(cend =) ::ranges::cend;

/*!\typedef std::ranges::ostream_iterator
* \brief Alias for ranges::ostream_iterator. Ostream adaptor for a Range type.
*/
using SEQAN3_DOXYGEN_ONLY(ostream_iterator =) ::ranges::ostream_iterator;

/*!\typedef std::ranges::iter_move
* \brief Alias for ranges::iter_move. Casts the result of dereferencing an object to its associated rvalue reference type/
*/
using SEQAN3_DOXYGEN_ONLY(iter_move =) ::ranges::iter_move;
//!\}
} // namespace std::ranges

#endif // no standard header
